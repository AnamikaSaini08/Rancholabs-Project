/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.8 scene.gltf -t
Author: JeremyW (https://sketchfab.com/JeremyW)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/star-b092c1d27d954c8e9c051299ef74038d
Title: Star
*/

import * as THREE from "three";
import React, { Ref, useRef ,useEffect} from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { StarProps } from "../../Interface/starProps";
import { motion } from "framer-motion-3d";

type GLTFResult = GLTF & {
  nodes: {
    star_0: THREE.Mesh;
    star_1: THREE.Mesh;
    star_2: THREE.Mesh;
  };
  materials: {
    glassesFrames: THREE.MeshStandardMaterial;
    lens: THREE.MeshStandardMaterial;
    Star: THREE.MeshStandardMaterial;
  };
};

type ActionName = "starAction";
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export const Star = ({ position}:any) => {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations } = useGLTF(
    "./Assets/star/scene.gltf"
  ) as GLTFResult;
  const { actions,names } = useAnimations(animations, group);
  const isStarToDelete = useRef(false);

  useEffect(() => {
    actions[names[0]].play();
  }, []);

  // useEffect(() => {
  //   if(shouldAnimate()){
  //     console.log("TUREEE")
  //     isStarToDelete.current = true;
  //   }
  // }, [deleteCoorBattery]);

  // const shouldAnimate = ():boolean => {
  //   return (
  //     deleteCoorBattery.length &&
  //     starPosition[0] === deleteCoorBattery[0] &&
  //     starPosition[2] === deleteCoorBattery[1]
  //   );
  // };
  const transition = isStarToDelete.current ? { delay:1.5, duration: 3} : null;

  return (
    <group ref={group as Ref<THREE.Group>} position={position} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="Root">
            {isStarToDelete.current ? (<motion.group name="star" position={[0, 0.601, 0.418]} scale={25}>
              <mesh
                name="star_0"
                geometry={nodes.star_0.geometry}
                material={materials.glassesFrames}
                animate={{ y: 7, z: 2 }}
                transition={transition}
                initial={{ y: 0, z: 0 }}
              />
              <mesh
                name="star_1"
                geometry={nodes.star_1.geometry}
                material={materials.lens}
              />
              <mesh
                name="star_2"
                geometry={nodes.star_2.geometry}
                material={materials.Star}
              />
            </motion.group>)
            :
            (<group name="star" position={[0, 0.601, 0.418]} scale={25}>
              <mesh
                name="star_0"
                geometry={nodes.star_0.geometry}
                material={materials.glassesFrames}
              />
              <mesh
                name="star_1"
                geometry={nodes.star_1.geometry}
                material={materials.lens}
              />
              <mesh
                name="star_2"
                geometry={nodes.star_2.geometry}
                material={materials.Star}
              />
            </group>)}
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("./Assets/star/scene.gltf");
