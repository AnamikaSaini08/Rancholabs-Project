/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.8 scene.gltf -t
Author: JeremyW (https://sketchfab.com/JeremyW)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/star-b092c1d27d954c8e9c051299ef74038d
Title: Star
*/

import * as THREE from "three";
import { Ref, useRef ,useEffect, useState} from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { motion } from "framer-motion-3d";

type GLTFResult = GLTF & {
  nodes: {
    star_0: THREE.Mesh;
    star_1: THREE.Mesh;
    star_2: THREE.Mesh;
  };
  materials: {
    glassesFrames: THREE.MeshStandardMaterial;
    lens: THREE.MeshStandardMaterial;
    Star: THREE.MeshStandardMaterial;
  };
};

type ActionName = "starAction";

export const Star = ({ position,starPosition,deleteCoorBattery,isReset,nextLevelUpdated,setNextLevelUpdated}:{
  position: [number,number,number];
  starPosition:[number,number,number];
  deleteCoorBattery: [number,number];
  isReset:boolean;
  nextLevelUpdated: boolean;
  setNextLevelUpdated: React.Dispatch<React.SetStateAction<boolean>>;
}) => {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(
    "./Assets/star/scene.gltf"
  ) as GLTFResult;

  const isStarToDelete = useRef(false);
  const [isVisible,setIsVisible] = useState(true);

  useEffect(()=>{
    if(nextLevelUpdated){
      setIsVisible(true);
      setNextLevelUpdated(false);
    }
    console.log("Eber")
  },[nextLevelUpdated])

  useEffect(() => {
    if(shouldAnimate()){
      console.log("TUREEE")
      isStarToDelete.current = true;
    }
  }, [deleteCoorBattery]);
  const resetStar = () :void=> {
    isStarToDelete.current = false;
    setIsVisible(true);
  };
  useEffect(() => {
    if (isReset) {
      resetStar();
    }
  }, [isReset])
  const shouldAnimate = ():boolean => {
    return (
      deleteCoorBattery.length &&
      starPosition[0] === deleteCoorBattery[0] &&
      starPosition[2] === deleteCoorBattery[1]
    );
  };
  const transition:any = isStarToDelete.current ? {delay:1, repeat: 1,
    repeatType: "reverse", duration: 1.4, stiffness: 100} : null;

  return (
    <>{isVisible && <group ref={group as Ref<THREE.Group>} position={position} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="Root">
            {isStarToDelete.current ? (<motion.group name="star" 
            position={[0, 0.601, 0.418]} scale={25}
            animate={
                 { z: 2, rotateZ: 2 * Math.PI ,opacity: 0,} // Rotate 360 degrees (2 * Math.PI) when z is 2
               
            }
            transition={transition}
            onAnimationComplete={() => {
              isStarToDelete.current = false; // Hide the star by setting isStarToDelete to false
              setIsVisible(false);
            }}
            
            >
              <mesh
                name="star_0"
                geometry={nodes.star_0.geometry}
                material={materials.glassesFrames}
              />
              <mesh
                name="star_1"
                geometry={nodes.star_1.geometry}
                material={materials.lens}
              />
              <mesh
                name="star_2"
                geometry={nodes.star_2.geometry}
                material={materials.Star}
              />
            </motion.group>)
            :
            (<group name="star" position={[0, 0.601, 0.418]} scale={25} >
              <mesh
                name="star_0"
                geometry={nodes.star_0.geometry}
                material={materials.glassesFrames}
              />
              <mesh
                name="star_1"
                geometry={nodes.star_1.geometry}
                material={materials.lens}
              />
              <mesh
                name="star_2"
                geometry={nodes.star_2.geometry}
                material={materials.Star}
              />
            </group>)}
          </group>
        </group>
      </group>
    </group>}</>
  );
}

useGLTF.preload("./Assets/star/scene.gltf");
